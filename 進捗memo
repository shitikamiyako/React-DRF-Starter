MaterialーUIでのコンポーネント分割

・レイアウト

・本体

・上2つのルートフォルダ

Formとリストを集合させたい場合

・レイアウト
・Form(onSubmitを受け取るようにする)
・本体兼リスト表示部分
→ ここのReact Hooksとaxios処理を含めたonSubmitを定義する

やること

リスト表示するコンテンツ単位のデザイン

・タイトル
・著者
・出版社
・ISBN
・出版年月日
・お気に入りボタン(filterできるようにする)
・試し読みへのリンクがあればそこへのリンク

これらをカードにまとめて表示するようにする

デフォルトでAPIから引っ張ってきたdataを試し読み等々を排除した純粋なタイトルのみにする(現在Filterしてる状態をデフォルトにする)
Filterをお気に入りにしたものを抽出して表示する使用に変更する。

1/30


書籍検索画面

カードコンテンツ
→ タイトル・著者
Popoverで
→
・本段登録ボタン
・購入リンク(IconButton)
・試し読みリンク(IconButton)
・出版社と出版年月日表示(Popover)
自分の本棚追加ボタン
カード(ボタン扱い)クリック
→ Menuで上記IconButton表示
上記まで終わったらfirebaseへ

備考
ISBN検索はOpenDBでやるようにする(後で統合するかは別としてとりあえず別画面扱い)。
本棚(DB)側と照合して追加済みのものを含んで登録処理したときにそこだけスキップさせたい。
一括処理はチェックボックス方式？

自分の本棚画面


Firebase

認証画面を作り、Djangoのindex.htmlにReactをレンダリングさせる。
あとはCSRF等々準備をして認証チェック。

フロントでの認証の挙動は確認したのであとは
・idTokenをDRFにパスする作業
・認証状態の管理
.Tokenの有効期限
・リフレッシュはどうするか

くらい。

ひとまず目指すところは

ログインボタン
↓
Firebase認証スタート
↓
成功ならほしい情報(TwitterLoginならTwitterのユーザー情報)とidToken他が返ってくる。
↓
idTokenをDRFにパス、認証開始。
↓
成功ならひとまずユーザーを返す、存在しないならDRF側のUserデータベースに登録。

ここまで。

つまり

・ユーザー登録(作成)及びログイン
→ firebase
・ユーザー管理(実際に使うユーザー名やリレーションのためのModel、Firebaseとの整合性はuidで取る)
→ DRF
・認証状態によるルーティング
→ React
・認証状態管理
→ React・DRF
(Reduxでフロント側の認証状態を永続化し、バックエンドで認証期限を管理して必要に応じてリフレッシュさせる等)
となり、認証用のAuthentication_classとは別にログインの際には専用にViewを作る形になる。
なのでDRFとのやり取りの際にはaxiosを以下のように書いてHttpリクエストにヘッダーをつけてやる必要がある。

ex.
const response  = await axios.get(URL,{
        headers: {
            'Authorization': idToken
        }
    })

ログインボタン発火→FirebaseAuthentication→idTokenをリクエストヘッダにつけてWhoAmIViewにGETして返ってくるかどうか

→返ってきたらそれを確認してログイン後の画面にフロント側でリダイレクトさせればいい。